import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';

const String ENDPOINT = 'https://todoapp-api.apps.k8s.gu.se';

/// Model class representing Todo task.
class Todo {
  String? id;
  String title;
  String done;

  Todo(this.title, this.done, {this.id});

  /// Factory constructor, create a Todo object from JSON data.
  factory Todo.fromJson(Map<String, dynamic> json) {
    return Todo(
      json['title'],
      json['done'].toString(),
      id: json['id'],
    );
  }

  /// Converts a Todo object to JSON.
  Map<String, dynamic> toJson() {
    return {
      'title': title,
      'done': done,
    };
  }
}

/// Registers and retrieves a new API key from the server.
Future<String> getApiKey() async {
  final response = await http.get(Uri.parse('$ENDPOINT/register'));
  if (response.statusCode == 200) {
    return response.body; // Returns the API key from the response.
  } else {
    throw Exception('Failed to get API key');
  }
}

/// Saves the API key locally using SharedPreferences.
Future<void> saveApiKey(String apiKey) async {
  SharedPreferences prefs = await SharedPreferences.getInstance();
  await prefs.setString('api_key', apiKey); // Save the API key.
}

/// Retrieves a saved API key from SharedPreferences.
Future<String?> getSavedApiKey() async {
  SharedPreferences prefs = await SharedPreferences.getInstance();
  return prefs.getString('api_key'); // Return the API key if it exists.
}

/// Fetches all tasks from the API using the provided API key.
Future<List<Todo>> getTodos(String apiKey) async {
  final response = await http.get(Uri.parse('$ENDPOINT/todos?key=$apiKey'));

  if (response.statusCode == 200) {
    List<dynamic> data = jsonDecode(response.body);
    // Convert each JSON object into a Todo object and return a list.
    return data.map((json) => Todo.fromJson(json)).toList();
  } else {
    throw Exception('Failed to load todos');
  }
}

/// Sends a new task to the API to add it to the server.
Future<Todo> addTodoToAPI(String apiKey, Todo todo) async {
  // Create a JSON without id, since id is generated by the API.
  final todoWithoutId = {
    'title': todo.title,
    'done': todo.done,
  };

  final response = await http.post(
    Uri.parse('$ENDPOINT/todos?key=$apiKey'),
    headers: {
      'Content-Type': 'application/json',
    },
    body: jsonEncode(todoWithoutId), // Send Todo as JSON.
  );

  if (response.statusCode == 200) {
    // Parse the response and return the created Todo object.
    List<dynamic> jsonResponse = jsonDecode(response.body);
    final todoJson = jsonResponse.firstWhere(
      (element) => element['title'] == todo.title,
    );
    return Todo.fromJson(todoJson); // Return the created Todo object with id.
  } else {
    throw Exception('Failed to add todo');
  }
}

/// Updates a task in the API using its ID.
Future<void> updateTodoInAPI(String apiKey, Todo todo) async {
  final response = await http.put(
    Uri.parse('$ENDPOINT/todos/${todo.id}?key=$apiKey'),
    headers: {
      'Content-Type': 'application/json',
    },
    body: jsonEncode({
      'title': todo.title,
      'done': todo.done,
    }),
  );

  if (response.statusCode != 200) {
    throw Exception('Kunde inte uppdatera todo');
  }
}

/// Removes a task from the API using its ID.
Future<void> deleteTodoFromAPI(String apiKey, String todoId) async {
  final response = await http.delete(
    Uri.parse('$ENDPOINT/todos/$todoId?key=$apiKey'),
    headers: {
      'Content-Type': 'application/json',
    },
  );

  if (response.statusCode != 200) {
    throw Exception('Could not delete Todo');
  }
}
